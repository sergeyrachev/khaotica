<html>

<head>
<title>Built-In Operators</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/>
<link href="../css/txt.css" rel="stylesheet" type="text/css"/>
</head>


<body topmargin="20" leftmargin="5" bgcolor="white" link="red" alink="#003399" vlink="#003399">

<h3><strong>9. Built-In Operators</strong></h3>

<table border="0" width="100%" class="Syntax">
  <tr>
    <td width="100%" bgcolor="#000000"><code></code><font color="#FFFFFF"><strong><span
    class="SyntaxHeading">Syntax Summary</span></strong></font><code></code></td>
  </tr>
  <tr>
    <td width="100%"><pre><code>lengthof(<i>var</i>);
isidof(<i>class_name</i>, <i>var</i>);
skipbits(<i>n</i>);
nextbits(<i>[aligned(length),] [(big|little),] [(signed|unsigned),] n</i>);
nextcode(<i>[aligned(length),] code</i>);
numbits();</code></pre>
    </td>
  </tr>
</table>

<p>
Operators are built-in functions that are made available to the Flavor programmer in order to
facilitate certain frequently appearing data manipulations. These operators are the only functions
that are available in Flavor.
</p>


<h4><a name="lengthof">9.1 lengthof()</a></h4>

<p>
The <code>lengthof()</code> operator is used to obtain the parsed length of a parsable variable.
The general syntax is as follows:
</p>

<table border="0" width="100%" class="Syntax">
  <tr>
    <td width="100%"><pre><code>lengthof(<em>var)</em>;</code></pre>
    </td>
  </tr>
</table>

<p>
<i>var</i> must be a parsable variable of any type that has been previously declared. The result of
the operator is treated as an <code>int</code>.
</p>

<p>
Since parsable variables can be declared more than once, the operator considers only the last instance
of the variable that has been declared (parsed from the bitstream). The following is an example of the
use of the operator.
</p>

<table border="0" width="100%" class="Example">
  <tr>
    <td width="100%"><pre><code>int(5) i = 3;
...
int(3) j = lengthof(i);</code></pre>
    </td>
  </tr>
</table>

<p>A more complex example where multi-dimensional arrays are used is as follows.</p>

<table border="0" width="100%" class="Example">
  <tr>
    <td width="100%"><pre><code>int i = 1;
int(i++) a[5];
int j = lengthof(a[4]); // j will be set to 5</code></pre>
    </td>
  </tr>
</table>

<p>
Here we declare a one-dimensional array <code>a</code> with five elements. The variable <code>j</code>
is set with the length of the last (4th) element. It is easy to see that the length of this element is
going to be 5.
</p>

<p>
In a declaration such as &quot;<code>aligned class A{}</code>&quot;, the bits skipped for alignment are
not accounted for by the <code>lengthof()</code>&nbsp; operator. This is true for simple variables as well.
These bits, however, are counted for the enclosing class.&nbsp;
</p>


<h4><a name="isidof">9.2 isidof()</a></h4>

<p>
The <code>isidof()</code> operator is used to check if the value of a variable is among the IDs of a 
polymorphic class. The general syntax is as follows:
</p>

<table border="0" width="100%" class="Syntax">
  <tr>
    <td width="100%"><pre><code>isidof(<i>class_name</i>, <i>var</i>);</code></pre>
    </td>
  </tr>
</table>

<p>
<i>class_name</i> is the name of a polymorphic class that has been previously declared, and <i>var</i> is
the name of a simple variable. The result of the operator is treated as an <code>int</code>, and it is 1 if
the value of <i>var</i> is among the IDs of <i>class_name</i> or 0 otherwise.
</p>

<p>
This operator was introduced to accommodate a coding structure in which the syntax was expressed as: parse
as many objects of a particular type as you can from the bitstream. This corresponds to examining the
following bits on the bitstream and, if they correspond to an object of&nbsp; the given type, parsing it;
otherwise the syntax would continue to the next construct. Without this operator, the programmer would have
to explicitly construct a <code>switch</code> statement or a series of <code>if-then-else</code> statements,
checking against all IDs of the class. This not only would be tiresome, but would also be a source of errors if
one of the IDs was not included.
</p>

<p>
The following is an example of the use of this operator for parsing the above-mentioned construct.
</p>

<table border="0" width="100%" class="Example">
  <tr>
    <td width="100%"><pre><code>abstract class A : int(8) id = 0 {
    ...
}

...    

int(8)* id;
int i;
while (isidof(A, id)==1) {
    A a[[i++]];
    int(8)* id;
}</code></pre>
    </td>
  </tr>
</table>

<p>
Here we declare an (abstract) class <code>A</code>, with presumably a number of derived classes (not shown
here). The <code>while</code> loop following the declaration of <code>A</code> examines the next 8 bits of
the bitstream. If they correspond to an ID of one of the classes derived from <code>A</code> then the object
is parsed; if not, the code continues.
</p>


<h4><a name="skipbits">9.3 skipbits()</a></h4>

<p>
The skipbits() operator is used to skip unwanted bits from the bitstream.  The general syntax is as follows:
</p>

<table border="0" width="100%" class="Syntax">
  <tr>
    <td width="100%"><pre><code>skipbits(<i>n</i>);</code></pre>
    </td>
  </tr>
</table>

<p>
<i>n</i> is the number of bits to skip; it can be an integer constant or a non-constant variable of type 
compatible to <code>int</code>.  In the case of outputting bits, zeroes are added.  This operator is useful for 
skipping information that is not pertinent to an application.  For example, an MPEG-2 Systems stream (a 
transport stream) can consist of multiple elementary streams (e.g., one video stream and three audio 
streams -- for three different languages), each packetized into packets of 188 bytes.  With the size of the
packets known, the packets of unwanted streams can be simply skipped using this operator.
</p>


<h4><a name="nextbits">9.4 nextbits()</a></h4>

<p>
The <code>nextbits()</code> operator is used as a substitute for look-ahead parsing.  The general syntax is 
as follows:
</p>

<table border="0" width="100%" class="Syntax">
  <tr>
    <td width="100%"><pre><code>nextbits(<i>[aligned(length),] [(big|little),] [(signed|unsigned),] n</i>);</code></pre>
    </td>
  </tr>
</table>

<p>
<i>n</i> determines the number of bits to look-ahead read.  The operator, by default, returns the signed 
integer representation of the next <i>n</i> bits in big-endian byte ordering.  The optional <i>aligned</i>
parameter can be used exactly in the same way as the <i>aligned</i> modifier is used in the parsable 
variable declarations.  The (<i>big</i> or <i>little</i>) and (<i>signed</i> or <i>unsigned</i>) optional 
parameters can be used to indicate the integer representation of the <i>n</i> bits read.  Using the operator
instead of the look-ahead parsable variable avoids declaring an extra variable.
</p>


<h4><a name="nextcode">9.5 nextcode()</a></h4>

<p>
The <code>nextcode()</code> operator is used to search for a given code.  The general syntax is as follows:
</p>

<table border="0" width="100%" class="Syntax">
  <tr>
    <td width="100%"><pre><code>nextcode(<i>[aligned(length),] code</i>);</code></pre>
    </td>
  </tr>
</table>

<p>
<i>code</i> is a constant binary, octal, or hexadecimal literal - a literal that also conveys its length.
For example, in the MPEG-2 Video specification, the <code>0x00000100</code> code is used to indicate the 
start of a picture (frame) and the "<code>nextcode(aligned(8), 0x00000100);</code>" statement skips all 
bits upto but excluding the next <code>0x00000100</code> code, where the code is byte aligned.  When 
outputting bits, zeroes are added until the next byte-aligned position.
</p>


<h4><a name="numbits">9.6 numbits()</a></h4>

<p>
The <code>numbits()</code> operator is used to obtain the total number of bits read/written so far.  The
general syntax is as follows:
</p>

<table border="0" width="100%" class="Syntax">
  <tr>
    <td width="100%"><pre><code>numbits();</code></pre>
    </td>
  </tr>
</table>


<p align="center" class="notice"><a href='..\copyright.htm'>Copyright Notice</a></p>
<p>&nbsp;</p>

</body>

</html>
