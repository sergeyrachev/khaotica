<html>

<head>
<title>Expressions and Statements</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/>
<link href="../css/txt.css" rel="stylesheet" type="text/css"/>
</head>


<body topmargin="20" leftmargin="5" bgcolor="white" link="red" alink="#003399" vlink="#003399">

<h3><strong>4. Expressions and Statements</strong></h3>

<table border="0" width="100%" class="Syntax">
  <tr>
    <td class="SyntaxHeading" width="100%" bgcolor="#000000"><code></code><font color="#FFFFFF"><strong><span class="SyntaxHeading">Syntax Summary</span></strong></font><code></code></td>
  </tr>
  <tr>
    <td width="100%">
      <pre><span class="SyntaxText">All C++/Java arithmetic, logical, and assignment operators are supported.
All C++/Java flow control statements are supported (<code>if</code>-<code>else</code>, <code>do</code>-<code>while</code>, <code>while</code>, <code>for</code>, <code>switch</code>).</span></pre>
    </td>
  </tr>
</table>

<p>
Flavor supports all of the C++ and Java arithmetic, logical, and assignment operators. However, parsable
variables cannot be used as lvalues. (Note: This ensures that they always represent the bitstream's
contents, and allow consistent operation for the translator-generated <code>put()</code> and
<code>get()</code> methods).
</p>

<p>
Flavor also supports all the familiar flow control statements: <code>if</code>-<code>else</code>,
<code>do</code>-<code>while</code>, <code>while</code>, and <code>switch</code>. In contrast with C++
and Java, variable declarations are not allowed within the arguments of these statements (i.e.,
"<code>for (int i=0; ; );</code>" is not allowed. This is because in C++ the scope of this variable will
be the enclosing one, while in Java it will be the enclosed one.
</p>

<p>
Even though Java does not allow non-boolean expressions within the arguments of control statements (e.g.,
"<code>if (1) {...}</code>" is not allowed in Java), starting with Version 5.1, Flavor supports them 
for less verbose notations.  When generating Java code, the translator automatically converts such 
expressions into corresponding boolean expressions.
</p>

<p>
The following is an example of the use of these flow control statements.
</p>

<table border="0" width="100%" class="Example">
  <tr>
    <td width="100%"><pre><code>int(2) a;
if (a == 1) {
    int(3) b;
}
else {
    int(4) b;
}</code></pre>
    </td>
  </tr>
</table>

<p>
The variable <code>b</code> is declared with a parse size of 3 if <code>a</code> is equal to 1, and with
a parse size of 4 otherwise. Observe that this construct would not be meaningful in C++ or Java as the
two declarations would be considered as being in separate scopes. This is the reason why parsable
variables need to obey slightly different scoping rules than regular variables (see 
<a href="scoping.htm">Scoping Rules</a>).
</p>


<p align="center" class="notice"><a href='..\copyright.htm'>Copyright Notice</a></p>
<p>&nbsp;</p>

</body>

</html>
