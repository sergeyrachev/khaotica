<html>

<head>
<title>Classes</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/>
<link href="../css/txt.css" rel="stylesheet" type="text/css"/>
</head>


<body topmargin="20" leftmargin="5" bgcolor="white" link="red" alink="#003399" vlink="#003399">

<h3><strong>5. Classes</strong></h3>

<table border="0" width="100%" class="Syntax">
  <tr>
    <td class="SyntaxHeading" width="100%" bgcolor="#000000"><code></code><font color="#FFFFFF"><strong><span class="SyntaxHeading">Syntax Summary</span></strong></font><code></code></td>
  </tr>
  <tr>
    <td width="100%"><pre><code>[aligned[(<em>alength</em>)]]class <em>name</em>[(<em>parameter list</em>)] [extends <em>base</em>] [ : <em>type</em>(<em>length</em>) <em>id</em> = [<em>value</em>|<em>range</em>] ]
{
    [element; ...]
}; // trailing ';' optional</code></pre>
    </td>
  </tr>
</table>

<p>
Flavor uses the notion of classes in exactly the same way as C++ and Java do. It is the fundamental 
structure in which object data is organized. Keeping in line with the support of both C++ and 
Java-style programming, classes in Flavor cannot be nested, and only single inheritance is 
supported. Also, due to the declarative nature of Flavor, methods are not allowed (this includes 
constructors and destructors).
</p>


<h4><a name="general">5.1 General</a></h4>

<p>
The following is an example of a simple class declaration with just two parsable member variables.
</p>

<table border="0" width="100%" class="Example">
  <tr>
    <td width="100%"><pre><code>class SimpleClass {
    int(3) a;
    unsigned int(4) b;
}; // trailing ';' optional</code></pre>
    </td>
  </tr>
</table>

<p>
The trailing '<code>;</code>' character is optional accommodating both C++ and Java-style class declarations.
</p>

<p>
This class defines objects which contain two parsable variables. They will be present in the bitstream in 
the same order they are declared. After this class is defined, we can declare objects of this type:
</p>

<table border="0" width="100%" class="Example">
  <tr>
    <td width="100%"><pre><code>SimpleClass a;</code></pre>
    </td>
  </tr>
</table>

<p>
A class is considered parsable if it contains at least one variable that is parsable. Declaration of
parsable class variables can be prepended by the <code>aligned</code> modifier in the same way as 
simple parsable variables.
</p>

<p>
Class member variables in Flavor do not require access modifiers (<code>public</code>, <code>protected</code>,
<code>private</code>). In essence, all such variables are considered <code>public</code>.
</p>


<h4><a name="forward">5.2 Forward/Recursive Declarations</a></h4>

<p>
As of Flavor Version 3.0, the language supports forward declarations, as well as recursive data
structures.  Forward declarations are useful when two classes contain each other. Let's consider
an example.
</p>

<table border="0" width="100%" class="Example">
  <tr>
    <td width="100%"><pre><code>class B; // Forward declaration

class A {
    B b;
}

class B {
    A a;
}</code></pre>
    </td>
  </tr>
</table>

<p>
Here the two classes <code>A</code> and <code>B</code> that contain each other. In order to allow
<code>A</code> to include <code>B</code>, we must first provide a forward declaration for
<code>B</code>.
</p>

<p>
Forward-declared classes cannot be used as base classes (see <a href="#inheritance">Inheritance</a>
below); the full definition of a class must be available before the class can be used as a base
class. Forward declarations do not need or allow any of the modifiers such as <code>extends</code>, 
<code>abstract</code>, or <code>aligned</code> and they should also not have ID declaration.
</p>

<p>
Also, a forward-declared class is considered as parsable. This is because the translator cannot know
if the class is actually parsable or not until it has seen the full definition. This affects the
scoping of variables that have as their type a forward-declared class - they will follow the rules for
parsable variables, even if the class is non-parsable (see <a href="scoping.htm">Scoping Rules</a>).
</p>

<p>
Note that forward declarations allow mutual inclusion of two classes. This creates an infinite loop that
<i>must</i> somehow be broken by the syntax itself. The preceding example, as given above, creates an
infinite loop in the syntax description. A well-designed structure would involve a condition that 
would determine the inclusion of <code>A</code> in <code>B</code>, or <code>B</code> in <code>A</code>.
The following shows an example of how this infinite loop can be broken.
</p>

<table border="0" width="100%" class="Example">
  <tr>
    <td width="100%"><pre><code>class B; // Forward declaration

class A {
    B b;
}
    
class B {
    int(1) flag;
    if (flag)
        A a;
}</code></pre>
    </td>
  </tr>
</table>

<p>
The <code>flag</code> variable determines the inclusion of <code>A</code> in <code>B</code> and thus can
break the infinite loop. This cyclic declaration can also be direct, i.e., on the same class. For example:
</p>

<table border="0" width="100%" class="Example">
  <tr>
    <td width="100%"><pre><code>class A {
    A a;
}</code></pre>
    </td>
  </tr>
</table>

<p>
Here <code>A</code> contains itself directly, and hence there is no need for a forward declaration. This is
valid Flavor code, although of arguably of dubious utility.
</p>

<p>
Note that the translator can detect these cyclic declarations, and can optionally warn the user about them.
</p>


<h4><a name="parameter">5.3 Parameter Types</a></h4>

<p>
As Flavor classes cannot have constructors, it is necessary to have a mechanism to pass external information
to a class. This is accomplished using parameter types. These act the same way as formal arguments in function
or method declarations do. They are placed in parenthesis after the name of the class. For example:
</p>

<table border="0" width="100%" class="Example">
  <tr>
    <td width="100%"><pre><code>class SimpleClass(int i[2]) {
    int(3) a = i[0];
    unsigned int(3) b = i[1];
}</code></pre>
    </td>
  </tr>
</table>

<p>
When declaring variables of parameter type classes, it is required that actual arguments are provided in place
of the formal ones:
</p>

<table border="0" width="100%" class="Example">
  <tr>
    <td width="100%"><pre><code>int(2) v[2];
SimpleClass a(v);</code></pre>
    </td>
  </tr>
</table>

<p>
Of course the types of the formal and actual parameters must match. For arrays, only their dimensions are
relevant; their actual sizes are not significant as they can be dynamically varying. Note that class types are
allowed in parameter declarations as well.
</p>


<h4><a name="inheritance">5.4 Inheritance</a></h4>

<p>
Flavor supports single inheritance so that compatibility with Java is maintained. Although Java can
&quot;simulate&quot; multiple inheritance through the use of interfaces, Flavor has no such facility (it would
be meaningless since methods do not exist in Flavor).
</p>

<p>
Derivation in C++ and Java is accomplished using a different syntax (extends versus &#145;:&#146;). Here we
opted for the Java notation (also &#145;:&#146; is used for object identifier declarations as explained in
<a href="classes.htm#polymorphic">Polymorphic Parsable Classes</a>).
</p>

<p>
The following shows a simple example of a derived class declaration.
</p>

<table border="0" width="100%" class="Example">
  <tr>
    <td width="100%"><pre><code>class A {
    int(2) a;
}
   
class B extends A {
    int(3) b;
}</code></pre>
    </td>
  </tr>
</table>

<p>
Derivation from a bitstream representation point of view means that <code>B</code> is an <code>A</code> with
some additional information. In other words, the behavior would be almost identical if we just copied the
statements between the braces in the declaration of <code>A</code> in the beginning of <code>B</code>. We say
almost here because scoping rules of variable declarations also come into play here (see 
<a href="scoping.htm">Scoping Rules</a>).
</p>

<p>
Note that if a class is derived from a parsable class, it is considered parsable as well.
</p>


<h4><a name="polymorphic">5.5 Polymorphic Parsable Classes</a></h4>

<p>
Polymorphism is the capability to use a derived object in a place where an object of a base class is expected.
Flavor allows objects residing in a bitstream to have polymorphic behavior by using object identifiers or IDs.
</p>

<p>
The concept of IDs is rather simple: in order to detect which object we should parse/generate, there must be a
parsable variable that will identify it. This variable must have a different expected value for any class derived
from the originating base class, so that object resolution can be uniquely performed in a well-defined way.
Object ID values must be constant expressions.
</p>

<p>
In order to signify the importance of ID variables, they are declared immediately after the class name
including any derivation declaration) and before the class body. They are separated from the class name
declaration using a colon (&#145;<code>:</code>&#146;). For example:
</p>

<table border="0" width="100%" class="Example">
  <tr>
    <td width="100%"><pre><code>class A : int(1) id = 0 {
    int(2) a;
}
   
class B extends A : int(1) id = 1 {
    int(3) b;
}</code></pre>
    </td>
  </tr>
</table>

<p>
The name and the type of the ID variable is irrelevant, and can be anything that the user chooses. It cannot,
however, be an array or a class variable (only built-in types are allowed). Also, the name, type, and parse
size must be identical between the base and derived classes.
</p>

<p>
The semantics of the object identifiers are the following. Upon reading the bitstream, if the next 1 bit has
the value 0 an object of type <code>A</code> will be parsed; if the value is 1 then an object of type
<code>B</code> will be parsed. (Note: For output purposes, it is up to the user to set up the right object type
in preparation for output.)
</p>

<p>
Object identifiers are not required for all derived classes of a base class that has a declared ID. This allows,
for example, having the following inheritance tree.
</p>

<p>
&nbsp;&nbsp; <font face="Courier" size="3"><img src="../images/tree.gif" width="235" height="183"></font>
</p>

<p>
Here only the classes represented by the black circles have IDs. As a result, only classes A, B, C, and D can
be used wherever an A can appear; the intermediate classes cannot.
</p>

<p>
The ID of a class is also possible to have a range of possible values which is specified as start_id .. end_id,
inclusive of both bounds. For example: (NOTE: ID ranges are supported starting with Flavor Version 4.3)
</p>

<table border="0" width="100%" class="Example">
  <tr>
    <td width="100%"><pre><code>class slice : aligned bit(32) slice_start_code = 0x00000101 .. 0x000001AF {
    ...
}</code></pre>
    </td>
  </tr>
</table>

<p>
ID variables are always considered constant, i.e., they cannot be redeclared within the class. This is the
same as if the keyword <code>const</code> was prepended in their declaration.
</p>

<p>
If an alignment specification is present for both the class and its ID variable, the class alignment is applied
prior to ID alignment. In the following code the bitstream is first aligned on an 8-bit boundary, and it is
subsequently aligned on a 16-bit boundary before the <code>id</code> variable is parsed.
</p>

<table border="0" width="100%" class="Example">
  <tr>
    <td width="100%"><pre><code>aligned(8) class Test : aligned bit(16) id = 1 {
    ...
}</code></pre>
    </td>
  </tr>
</table>


<h4><a name="abstract">5.6 Abstract Classes</a></h4>

<p>
In the examples above, notice that the base class of an inheritance tree containing polymorphic classes must
be allocated an ID value. Oftentimes, however, the base class will never appear in the bitstream; it only
serves as a placeholder for its children. In order to allow the derived classes to use the entire ID range,
the base class can be declared as <code>abstract</code>.
</p>

<p>
Abstract classes do not participate in ID resolution, and their ID value should be set to 0. In the following
simple example, the derived classes use the entire range of ID values.
</p>

<table border="0" width="100%" class="Example">
  <tr>
    <td width="100%"><pre><code>abstract class A  : bit(1) flag = 0 {
    ...
}

class A0 extends A : bit(1) flag = 0 {
    . . .
}

class A1 extends A : bit(1) flag = 1 {
    . . .
}</code></pre>
    </td>
  </tr>
</table>

<p>
It is typically meaningless to have an abstract class with no derived classes that use IDs. (The
translator can detect this and issue a warning if requested by the user.)
</p>


<p align="center" class="notice"><a href='..\copyright.htm'>Copyright Notice</a></p>
<p>&nbsp;</p>

</body>

</html>
