/* @flavorc
 *
 * polytest.cpp
 * 
 * This file was automatically generated by flavorc
 * from the source file:
 *     '..\\..\\..\\fl\\polytest.fl'
 *
 * For information on flavorc, visit the Flavor Web site at:
 *     http://www.ee.columbia.edu/flavor
 *
 * -- Do not edit by hand --
 *
 */

#include <flavor.h>
#include "polytest.h"


int Base::putxml(IBitstream &_F_bs, short int bAttr, int _F_id_parsed) {
    int _F_ret = 0;
    int _F_dim0, _F_dim0_end;
    int _F_parse = 0;
    if (_F_id_parsed == 0) {
        _F_parse = 2;
        id = _F_bs.getbits(_F_parse);
        if (id != 0) {
            flerror("Const value mismatch for 'id'");
            _F_ret++;
            if (bAttr) {
                WriteXmlElement("<id type=\"flUInt\" bitLen=\"%d\">%u</id>", _F_parse, id);
            }
            else {
                WriteXmlElement("<id bitLen=\"%d\">%u</id>", _F_parse, id);
            }
        }
        else {
            if (bAttr) {
                WriteXmlElement("<id type=\"flUInt\" bitLen=\"%d\">%u</id>", _F_parse, id);
            }
            else {
                WriteXmlElement("<id bitLen=\"%d\">%u</id>", _F_parse, id);
            }
            trace(_F_bs.getpos()-_F_parse, _F_parse, (unsigned int)id, "id (%u)", id);
        }
        _F_id_parsed = 1;
    }
    _F_parse = 32;
    marker1 = _F_bs.getbits(_F_parse);
    if (marker1 != 65535) {
        flerror("Const value mismatch for 'marker1'");
        _F_ret++;
        if (bAttr) {
            WriteXmlElement("<marker1 type=\"flUInt\" bitLen=\"%d\">%u</marker1>", _F_parse, marker1);
        }
        else {
            WriteXmlElement("<marker1 bitLen=\"%d\">%u</marker1>", _F_parse, marker1);
        }
    }
    else {
        if (bAttr) {
            WriteXmlElement("<marker1 type=\"flUInt\" bitLen=\"%d\">%u</marker1>", _F_parse, marker1);
        }
        else {
            WriteXmlElement("<marker1 bitLen=\"%d\">%u</marker1>", _F_parse, marker1);
        }
        trace(_F_bs.getpos()-_F_parse, _F_parse, (unsigned int)marker1, "marker1 (%u)", marker1);
    }
    _F_parse = 5;
    marker2 = _F_bs.getbits(_F_parse);
    if (marker2 != 21) {
        flerror("Const value mismatch for 'marker2'");
        _F_ret++;
        if (bAttr) {
            WriteXmlElement("<marker2 type=\"flUInt\" bitLen=\"%d\">%u</marker2>", _F_parse, marker2);
        }
        else {
            WriteXmlElement("<marker2 bitLen=\"%d\">%u</marker2>", _F_parse, marker2);
        }
    }
    else {
        if (bAttr) {
            WriteXmlElement("<marker2 type=\"flUInt\" bitLen=\"%d\">%u</marker2>", _F_parse, marker2);
        }
        else {
            WriteXmlElement("<marker2 bitLen=\"%d\">%u</marker2>", _F_parse, marker2);
        }
        trace(_F_bs.getpos()-_F_parse, _F_parse, (unsigned int)marker2, "marker2 (%u)", marker2);
    }
    _F_parse = 4;
    length = _F_bs.getbits(_F_parse);
    if (bAttr) {
        WriteXmlElement("<length type=\"flUInt\" bitLen=\"%d\">%u</length>", _F_parse, length);
    }
    else {
        WriteXmlElement("<length bitLen=\"%d\">%u</length>", _F_parse, length);
    }
    _F_dim0_end = length;
    for (_F_dim0 = 0; _F_dim0 < _F_dim0_end; _F_dim0++) {
        _F_parse = 8;
        data[_F_dim0] = _F_bs.sgetbits(_F_parse);
        if (bAttr) {
            WriteXmlElement("<data type=\"flSChar\" bitLen=\"%d\">%c</data>", _F_parse, data[_F_dim0]);
        }
        else {
            WriteXmlElement("<data bitLen=\"%d\">%c</data>", _F_parse, data[_F_dim0]);
        }
    }
    return _F_ret;
}

int Derived1::putxml(IBitstream &_F_bs, short int bAttr, int _F_id_parsed) {
    int _F_ret = 0;
    int _F_parse = 0;
    if (_F_id_parsed == 0) {
        _F_parse = 2;
        id = _F_bs.getbits(_F_parse);
        if (id != 1) {
            flerror("Const value mismatch for 'id'");
            _F_ret++;
            if (bAttr) {
                WriteXmlElement("<id type=\"flUInt\" bitLen=\"%d\">%u</id>", _F_parse, id);
            }
            else {
                WriteXmlElement("<id bitLen=\"%d\">%u</id>", _F_parse, id);
            }
        }
        else {
            if (bAttr) {
                WriteXmlElement("<id type=\"flUInt\" bitLen=\"%d\">%u</id>", _F_parse, id);
            }
            else {
                WriteXmlElement("<id bitLen=\"%d\">%u</id>", _F_parse, id);
            }
            trace(_F_bs.getpos()-_F_parse, _F_parse, (unsigned int)id, "id (%u)", id);
        }
        _F_id_parsed = 1;
    }
    _F_ret += Base::putxml(_F_bs, bAttr, _F_id_parsed);
    _F_parse = 8;
    d1 = _F_bs.sgetbits(_F_parse);
    if (d1 != 1) {
        flerror("Const value mismatch for 'd1'");
        _F_ret++;
        if (bAttr) {
            WriteXmlElement("<d1 type=\"flSInt\" bitLen=\"%d\">%d</d1>", _F_parse, d1);
        }
        else {
            WriteXmlElement("<d1 bitLen=\"%d\">%d</d1>", _F_parse, d1);
        }
    }
    else {
        if (bAttr) {
            WriteXmlElement("<d1 type=\"flSInt\" bitLen=\"%d\">%d</d1>", _F_parse, d1);
        }
        else {
            WriteXmlElement("<d1 bitLen=\"%d\">%d</d1>", _F_parse, d1);
        }
        trace(_F_bs.getpos()-_F_parse, _F_parse, (unsigned int)d1, "d1 (%d)", d1);
    }
    return _F_ret;
}

int Derived2::putxml(IBitstream &_F_bs, short int bAttr, int _F_id_parsed) {
    int _F_ret = 0;
    int _F_parse = 0;
    if (_F_id_parsed == 0) {
        _F_parse = 2;
        id = _F_bs.getbits(_F_parse);
        if (id != 2) {
            flerror("Const value mismatch for 'id'");
            _F_ret++;
            if (bAttr) {
                WriteXmlElement("<id type=\"flUInt\" bitLen=\"%d\">%u</id>", _F_parse, id);
            }
            else {
                WriteXmlElement("<id bitLen=\"%d\">%u</id>", _F_parse, id);
            }
        }
        else {
            if (bAttr) {
                WriteXmlElement("<id type=\"flUInt\" bitLen=\"%d\">%u</id>", _F_parse, id);
            }
            else {
                WriteXmlElement("<id bitLen=\"%d\">%u</id>", _F_parse, id);
            }
            trace(_F_bs.getpos()-_F_parse, _F_parse, (unsigned int)id, "id (%u)", id);
        }
        _F_id_parsed = 1;
    }
    _F_ret += Base::putxml(_F_bs, bAttr, _F_id_parsed);
    _F_parse = 32;
    d2 = _F_bs.getfloat();
    if (d2 != (float)2.1) {
        flerror("Const value mismatch for 'd2'");
        _F_ret++;
        if (bAttr) {
            WriteXmlElement("<d2 type=\"flFloat\" bitLen=\"%d\">%g</d2>", _F_parse, d2);
        }
        else {
            WriteXmlElement("<d2 bitLen=\"%d\">%g</d2>", _F_parse, d2);
        }
    }
    else {
        if (bAttr) {
            WriteXmlElement("<d2 type=\"flFloat\" bitLen=\"%d\">%g</d2>", _F_parse, d2);
        }
        else {
            WriteXmlElement("<d2 bitLen=\"%d\">%g</d2>", _F_parse, d2);
        }
        trace(_F_bs.getpos()-_F_parse, _F_parse, (double)d2, "d2 (%g)", d2);
    }
    return _F_ret;
}

int PolyTest::putxml(IBitstream &_F_bs, short int bAttr) {
    int _F_ret = 0;
    int _F_dim0, _F_dim0_end;
    int _F_b_id;
    int _F_parse = 0;
    _F_dim0_end = 3;
    for (_F_dim0 = 0; _F_dim0 < _F_dim0_end; _F_dim0++) {
        trace(_F_bs.getpos(), 0, (unsigned int)0, "processing Base b[%d]", _F_dim0);
        _F_parse = 2;
        _F_b_id = _F_bs.nextbits( _F_parse );
        if (_F_b_id == 0) {
            b[_F_dim0] = new(Base);
            IntoAClass("b xsi:type=\"Base\"", 0);
        }
        else if (_F_b_id == 1) {
            b[_F_dim0] = new(Derived1);
            IntoAClass("b xsi:type=\"Derived1\"", 0);
        }
        else if (_F_b_id == 2) {
            b[_F_dim0] = new(Derived2);
            IntoAClass("b xsi:type=\"Derived2\"", 0);
        }
        else {
            trace(_F_bs.getpos(), _F_parse, (unsigned int)_F_b_id, "ID b[%d].id lookup failed [ERROR]", _F_dim0);
            flerror("Unknown ID value for class 'b'[%d] of type 'Base': %d\n", _F_dim0, _F_b_id);
            b[_F_dim0] = new(Base);
        }
        _F_ret += b[_F_dim0]->putxml(_F_bs, bAttr);
        OutOfClass("</b>");
    }
    return _F_ret;
}
