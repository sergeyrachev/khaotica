/* @flavorc
 *
 * maptest.cpp
 * 
 * This file was automatically generated by flavorc
 * from the source file:
 *     '..\\..\\..\\fl\\maptest.fl'
 *
 * For information on flavorc, visit the Flavor Web site at:
 *     http://www.ee.columbia.edu/flavor
 *
 * -- Do not edit by hand --
 *
 */

#include <flavor.h>
#include "maptest.h"


int YUVblocks::putxml(IBitstream &_F_bs, short int bAttr) {
    int _F_ret = 0;
    int _F_parse = 0;
    return _F_ret;
}

int BPC::putxml(IBitstream &_F_bs, short int bAttr, YUVblocks *_F_arg, int *_F_parse, int *_F_code) {
    int _F_data = 0, _F_size = 0;
    int _F_esc_bits = 0;
    int _F_hit = 1;

    _F_data = _F_bs.nextbits(1);
    switch (_F_data) {
    case 0:
        _F_bs.skipbits(1);
        if (bAttr) {
            WriteXmlElement("<code type=\"flBit\" bitLen=\"1\">0</code>");
        }
        else {
            WriteXmlElement("<code bitLen=\"1\">0</code>");
        }
        IntoAClass("value", 0);
        _F_esc_bits = 0;
        _F_arg->Yblocks = 14;
        if (bAttr) {
            WriteXmlElement("<Yblocks type=\"flSInt\" bitLen=\"%d\">%d</Yblocks>", _F_esc_bits, _F_arg->Yblocks);
        }
        else {
            WriteXmlElement("<Yblocks bitLen=\"%d\">%d</Yblocks>", _F_esc_bits, _F_arg->Yblocks);
        }
        _F_esc_bits = 0;
        _F_arg->Ublocks = -1;
        if (bAttr) {
            WriteXmlElement("<Ublocks type=\"flSInt\" bitLen=\"%d\">%d</Ublocks>", _F_esc_bits, _F_arg->Ublocks);
        }
        else {
            WriteXmlElement("<Ublocks bitLen=\"%d\">%d</Ublocks>", _F_esc_bits, _F_arg->Ublocks);
        }
        _F_esc_bits = 0;
        _F_arg->Vblocks = 1;
        if (bAttr) {
            WriteXmlElement("<Vblocks type=\"flSInt\" bitLen=\"%d\">%d</Vblocks>", _F_esc_bits, _F_arg->Vblocks);
        }
        else {
            WriteXmlElement("<Vblocks bitLen=\"%d\">%d</Vblocks>", _F_esc_bits, _F_arg->Vblocks);
        }
        OutOfClass("</value>");
        _F_size = 1;
        break;
    default:
        _F_data = _F_bs.nextbits(2);
        switch (_F_data) {
        case 2:
            _F_bs.skipbits(2);
            if (bAttr) {
                WriteXmlElement("<code type=\"flBit\" bitLen=\"2\">2</code>");
            }
            else {
                WriteXmlElement("<code bitLen=\"2\">2</code>");
            }
            IntoAClass("value", 0);
            _F_esc_bits = 0;
            _F_arg->Yblocks = -4;
            if (bAttr) {
                WriteXmlElement("<Yblocks type=\"flSInt\" bitLen=\"%d\">%d</Yblocks>", _F_esc_bits, _F_arg->Yblocks);
            }
            else {
                WriteXmlElement("<Yblocks bitLen=\"%d\">%d</Yblocks>", _F_esc_bits, _F_arg->Yblocks);
            }
            _F_esc_bits = 0;
            _F_arg->Ublocks = 22;
            if (bAttr) {
                WriteXmlElement("<Ublocks type=\"flSInt\" bitLen=\"%d\">%d</Ublocks>", _F_esc_bits, _F_arg->Ublocks);
            }
            else {
                WriteXmlElement("<Ublocks bitLen=\"%d\">%d</Ublocks>", _F_esc_bits, _F_arg->Ublocks);
            }
            _F_esc_bits = 0;
            _F_arg->Vblocks = 2;
            if (bAttr) {
                WriteXmlElement("<Vblocks type=\"flSInt\" bitLen=\"%d\">%d</Vblocks>", _F_esc_bits, _F_arg->Vblocks);
            }
            else {
                WriteXmlElement("<Vblocks bitLen=\"%d\">%d</Vblocks>", _F_esc_bits, _F_arg->Vblocks);
            }
            OutOfClass("</value>");
            _F_size = 2;
            break;
        default:
            _F_data = _F_bs.nextbits(3);
            switch (_F_data) {
            case 6:
                _F_bs.skipbits(3);
                if (bAttr) {
                    WriteXmlElement("<code type=\"flBit\" bitLen=\"3\">6</code>");
                }
                else {
                    WriteXmlElement("<code bitLen=\"3\">6</code>");
                }
                IntoAClass("value", 0);
                _F_esc_bits = 0;
                _F_arg->Yblocks = 4;
                if (bAttr) {
                    WriteXmlElement("<Yblocks type=\"flSInt\" bitLen=\"%d\">%d</Yblocks>", _F_esc_bits, _F_arg->Yblocks);
                }
                else {
                    WriteXmlElement("<Yblocks bitLen=\"%d\">%d</Yblocks>", _F_esc_bits, _F_arg->Yblocks);
                }
                _F_esc_bits = 0;
                _F_arg->Ublocks = 2;
                if (bAttr) {
                    WriteXmlElement("<Ublocks type=\"flSInt\" bitLen=\"%d\">%d</Ublocks>", _F_esc_bits, _F_arg->Ublocks);
                }
                else {
                    WriteXmlElement("<Ublocks bitLen=\"%d\">%d</Ublocks>", _F_esc_bits, _F_arg->Ublocks);
                }
                _F_esc_bits = 0;
                _F_arg->Vblocks = -33;
                if (bAttr) {
                    WriteXmlElement("<Vblocks type=\"flSInt\" bitLen=\"%d\">%d</Vblocks>", _F_esc_bits, _F_arg->Vblocks);
                }
                else {
                    WriteXmlElement("<Vblocks bitLen=\"%d\">%d</Vblocks>", _F_esc_bits, _F_arg->Vblocks);
                }
                OutOfClass("</value>");
                _F_size = 3;
                break;
            default:
                _F_data = _F_bs.nextbits(4);
                switch (_F_data) {
                case 14:
                    _F_bs.skipbits(4);
                    if (bAttr) {
                        WriteXmlElement("<code type=\"flBit\" bitLen=\"4\">14</code>");
                    }
                    else {
                        WriteXmlElement("<code bitLen=\"4\">14</code>");
                    }
                    IntoAClass("value", 0);
                    _F_esc_bits = 8;
                    _F_arg->Yblocks = _F_bs.sgetbits(_F_esc_bits);
                    if (bAttr) {
                        WriteXmlElement("<Yblocks type=\"flSInt\" bitLen=\"%d\">%d</Yblocks>", _F_esc_bits, _F_arg->Yblocks);
                    }
                    else {
                        WriteXmlElement("<Yblocks bitLen=\"%d\">%d</Yblocks>", _F_esc_bits, _F_arg->Yblocks);
                    }
                    _F_esc_bits = 8;
                    _F_arg->Ublocks = _F_bs.sgetbits(_F_esc_bits);
                    if (bAttr) {
                        WriteXmlElement("<Ublocks type=\"flSInt\" bitLen=\"%d\">%d</Ublocks>", _F_esc_bits, _F_arg->Ublocks);
                    }
                    else {
                        WriteXmlElement("<Ublocks bitLen=\"%d\">%d</Ublocks>", _F_esc_bits, _F_arg->Ublocks);
                    }
                    _F_esc_bits = 12;
                    _F_arg->Vblocks = _F_bs.sgetbits(_F_esc_bits);
                    if (bAttr) {
                        WriteXmlElement("<Vblocks type=\"flSInt\" bitLen=\"%d\">%d</Vblocks>", _F_esc_bits, _F_arg->Vblocks);
                    }
                    else {
                        WriteXmlElement("<Vblocks bitLen=\"%d\">%d</Vblocks>", _F_esc_bits, _F_arg->Vblocks);
                    }
                    OutOfClass("</value>");
                    _F_size = 4;
                    break;
                default:
                    _F_hit = 0;
                }
            }
        }
    }
    if (_F_parse != NULL) *_F_parse = _F_size;
    if (_F_code != NULL) *_F_code = _F_data;
    return _F_hit;
}

int A::putxml(IBitstream &_F_bs, short int bAttr, float *_F_arg, int *_F_parse, int *_F_code) {
    int _F_data = 0, _F_size = 0;
    int _F_esc_bits = 0;
    int _F_hit = 1;

    _F_data = _F_bs.nextbits(1);
    switch (_F_data) {
    case 1:
        _F_bs.skipbits(1);
        if (bAttr) {
            WriteXmlElement("<code type=\"flBit\" bitLen=\"1\">1</code>");
        }
        else {
            WriteXmlElement("<code bitLen=\"1\">1</code>");
        }
        *_F_arg = (float)1.3;
        if (bAttr) {
            WriteXmlElement("<value type=\"flFloat\" bitLen=\"%d\">%g</value>", _F_esc_bits, *_F_arg);
        }
        else {
            WriteXmlElement("<value bitLen=\"%d\">%g</value>", _F_esc_bits, *_F_arg);
        }
        _F_size = 1;
        break;
    default:
        _F_data = _F_bs.nextbits(2);
        switch (_F_data) {
        case 1:
            _F_bs.skipbits(2);
            if (bAttr) {
                WriteXmlElement("<code type=\"flBit\" bitLen=\"2\">1</code>");
            }
            else {
                WriteXmlElement("<code bitLen=\"2\">1</code>");
            }
            *_F_arg = (float)2.2;
            if (bAttr) {
                WriteXmlElement("<value type=\"flFloat\" bitLen=\"%d\">%g</value>", _F_esc_bits, *_F_arg);
            }
            else {
                WriteXmlElement("<value bitLen=\"%d\">%g</value>", _F_esc_bits, *_F_arg);
            }
            _F_size = 2;
            break;
        default:
            _F_data = _F_bs.nextbits(3);
            switch (_F_data) {
            case 1:
                _F_bs.skipbits(3);
                if (bAttr) {
                    WriteXmlElement("<code type=\"flBit\" bitLen=\"3\">1</code>");
                }
                else {
                    WriteXmlElement("<code bitLen=\"3\">1</code>");
                }
                *_F_arg = (float)3.3;
                if (bAttr) {
                    WriteXmlElement("<value type=\"flFloat\" bitLen=\"%d\">%g</value>", _F_esc_bits, *_F_arg);
                }
                else {
                    WriteXmlElement("<value bitLen=\"%d\">%g</value>", _F_esc_bits, *_F_arg);
                }
                _F_size = 3;
                break;
            default:
                _F_data = _F_bs.nextbits(4);
                switch (_F_data) {
                case 1:
                    _F_bs.skipbits(4);
                    if (bAttr) {
                        WriteXmlElement("<code type=\"flBit\" bitLen=\"4\">1</code>");
                    }
                    else {
                        WriteXmlElement("<code bitLen=\"4\">1</code>");
                    }
                    _F_esc_bits = 32;
                    *_F_arg = _F_bs.getfloat();
                    if (bAttr) {
                        WriteXmlElement("<value type=\"flFloat\" bitLen=\"%d\">%g</value>", _F_esc_bits, *_F_arg);
                    }
                    else {
                        WriteXmlElement("<value bitLen=\"%d\">%g</value>", _F_esc_bits, *_F_arg);
                    }
                    _F_size = 4;
                    break;
                default:
                    _F_hit = 0;
                }
            }
        }
    }
    if (_F_parse != NULL) *_F_parse = _F_size;
    if (_F_code != NULL) *_F_code = _F_data;
    return _F_hit;
}

int MapTest::putxml(IBitstream &_F_bs, short int bAttr) {
    int _F_ret = 0;
    int _F_dim0, _F_dim0_end;
    int _F_parse = 0;
    int _F_code;
    _F_parse = 32;
    a = _F_bs.sgetbits(_F_parse);
    if (bAttr) {
        WriteXmlElement("<a type=\"flSInt\" bitLen=\"%d\">%d</a>", _F_parse, a);
    }
    else {
        WriteXmlElement("<a bitLen=\"%d\">%d</a>", _F_parse, a);
    }
    _F_dim0_end = 4;
    for (_F_dim0 = 0; _F_dim0 < _F_dim0_end; _F_dim0++) {
        trace(_F_bs.getpos(), 0, (unsigned int)0, "processing float fm[%d] via map A", _F_dim0);
        IntoAClass("fm", 0);
        if (A::putxml(_F_bs, bAttr, &fm[_F_dim0], &_F_parse, &_F_code) == 0) {
            flerror("Map 'A' lookup for 'fm[%d]' failed", _F_dim0);
            _F_ret++;
            trace(_F_bs.getpos(), _F_parse, (unsigned int)_F_code, "A lookup failed for fm[%d] [ERROR]", _F_dim0);
        }
        OutOfClass("</fm>");
        trace(_F_bs.getpos()-_F_parse, _F_parse, (unsigned int)_F_code, "fm[%d] via A (%g)", _F_dim0, fm[_F_dim0]);
    }
    _F_dim0_end = 4;
    for (_F_dim0 = 0; _F_dim0 < _F_dim0_end; _F_dim0++) {
        trace(_F_bs.getpos(), 0, (unsigned int)0, "processing YUVblocks chroma_format[%d] via map BPC", _F_dim0);
        IntoAClass("chroma_format", 0);
        chroma_format[_F_dim0] = new(YUVblocks);
        if (BPC::putxml(_F_bs, bAttr, chroma_format[_F_dim0], &_F_parse, &_F_code) == 0) {
            flerror("Map 'BPC' lookup for 'chroma_format[%d]' failed", _F_dim0);
            _F_ret++;
            trace(_F_bs.getpos(), _F_parse, (unsigned int)_F_code, "BPC lookup failed for chroma_format[%d] [ERROR]", _F_dim0);
        }
        OutOfClass("</chroma_format>");
        trace(_F_bs.getpos()-_F_parse, _F_parse, (unsigned int)_F_code, "chroma_format[%d] via BPC", _F_dim0);
    }
    return _F_ret;
}
