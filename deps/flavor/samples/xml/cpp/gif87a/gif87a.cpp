/* @flavorc
 *
 * gif87a.cpp
 * 
 * This file was automatically generated by flavorc
 * from the source file:
 *     '..\\..\\..\\fl\\gif87a.fl'
 *
 * For information on flavorc, visit the Flavor Web site at:
 *     http://www.ee.columbia.edu/flavor
 *
 * -- Do not edit by hand --
 *
 */

#include <flavor.h>
#include "gif87a.h"


int ColorEntry::putxml(IBitstream &_F_bs, short int bAttr) {
    int _F_ret = 0;
    int _F_parse = 0;
    _F_parse = 8;
    r = _F_bs.getbits(_F_parse);
    if (bAttr) {
        WriteXmlElement("<r type=\"flUInt\" bitLen=\"%d\">%u</r>", _F_parse, r);
    }
    else {
        WriteXmlElement("<r bitLen=\"%d\">%u</r>", _F_parse, r);
    }
    _F_parse = 8;
    g = _F_bs.getbits(_F_parse);
    if (bAttr) {
        WriteXmlElement("<g type=\"flUInt\" bitLen=\"%d\">%u</g>", _F_parse, g);
    }
    else {
        WriteXmlElement("<g bitLen=\"%d\">%u</g>", _F_parse, g);
    }
    _F_parse = 8;
    b = _F_bs.getbits(_F_parse);
    if (bAttr) {
        WriteXmlElement("<b type=\"flUInt\" bitLen=\"%d\">%u</b>", _F_parse, b);
    }
    else {
        WriteXmlElement("<b bitLen=\"%d\">%u</b>", _F_parse, b);
    }
    return _F_ret;
}

int ColorMap::putxml(IBitstream &_F_bs, short int bAttr, unsigned int bpp) {
    int _F_ret = 0;
    int _F_dim0, _F_dim0_end;
    int _F_parse = 0;
    _F_dim0_end = 1<<bpp;
    for (_F_dim0 = 0; _F_dim0 < _F_dim0_end; _F_dim0++) {
        color[_F_dim0] = new(ColorEntry);
        IntoAClass("color", 0);
        _F_ret += color[_F_dim0]->putxml(_F_bs, bAttr);
        OutOfClass("</color>");
    }
    return _F_ret;
}

int ScreenDescriptor::putxml(IBitstream &_F_bs, short int bAttr) {
    int _F_ret = 0;
    int _F_parse = 0;
    _F_parse = 16;
    width = _F_bs.little_getbits(_F_parse);
    if (bAttr) {
        WriteXmlElement("<width type=\"flUInt\" big=\"false\" bitLen=\"%d\">%u</width>", _F_parse, width);
    }
    else {
        WriteXmlElement("<width big=\"false\" bitLen=\"%d\">%u</width>", _F_parse, width);
    }
    _F_parse = 16;
    height = _F_bs.little_getbits(_F_parse);
    if (bAttr) {
        WriteXmlElement("<height type=\"flUInt\" big=\"false\" bitLen=\"%d\">%u</height>", _F_parse, height);
    }
    else {
        WriteXmlElement("<height big=\"false\" bitLen=\"%d\">%u</height>", _F_parse, height);
    }
    _F_parse = 1;
    M = _F_bs.getbits(_F_parse);
    if (bAttr) {
        WriteXmlElement("<M type=\"flUInt\" bitLen=\"%d\">%u</M>", _F_parse, M);
    }
    else {
        WriteXmlElement("<M bitLen=\"%d\">%u</M>", _F_parse, M);
    }
    _F_parse = 3;
    cr = _F_bs.getbits(_F_parse);
    if (bAttr) {
        WriteXmlElement("<cr type=\"flUInt\" bitLen=\"%d\">%u</cr>", _F_parse, cr);
    }
    else {
        WriteXmlElement("<cr bitLen=\"%d\">%u</cr>", _F_parse, cr);
    }
    _F_parse = 1;
    marker = _F_bs.getbits(_F_parse);
    if (marker != 0) {
        flerror("Const value mismatch for 'marker'");
        _F_ret++;
        if (bAttr) {
            WriteXmlElement("<marker type=\"flUInt\" bitLen=\"%d\">%u</marker>", _F_parse, marker);
        }
        else {
            WriteXmlElement("<marker bitLen=\"%d\">%u</marker>", _F_parse, marker);
        }
    }
    else {
        if (bAttr) {
            WriteXmlElement("<marker type=\"flUInt\" bitLen=\"%d\">%u</marker>", _F_parse, marker);
        }
        else {
            WriteXmlElement("<marker bitLen=\"%d\">%u</marker>", _F_parse, marker);
        }
        trace(_F_bs.getpos()-_F_parse, _F_parse, (unsigned int)marker, "marker (%u)", marker);
    }
    _F_parse = 3;
    pixel = _F_bs.getbits(_F_parse);
    if (bAttr) {
        WriteXmlElement("<pixel type=\"flUInt\" bitLen=\"%d\">%u</pixel>", _F_parse, pixel);
    }
    else {
        WriteXmlElement("<pixel bitLen=\"%d\">%u</pixel>", _F_parse, pixel);
    }
    _F_parse = 8;
    background = _F_bs.getbits(_F_parse);
    if (bAttr) {
        WriteXmlElement("<background type=\"flUInt\" bitLen=\"%d\">%u</background>", _F_parse, background);
    }
    else {
        WriteXmlElement("<background bitLen=\"%d\">%u</background>", _F_parse, background);
    }
    if (M!=0) {
        trace(_F_bs.getpos(), 0, (unsigned int)0, "processing ColorMap globalColorMap");
        globalColorMap = new(ColorMap);
        IntoAClass("globalColorMap", 0);
        _F_ret += globalColorMap->putxml(_F_bs, bAttr, pixel+1);
        OutOfClass("</globalColorMap>");
    }
    
    return _F_ret;
}

int ExtensionBlock::putxml(IBitstream &_F_bs, short int bAttr) {
    int _F_ret = 0;
    int _F_parse = 0;
    _F_parse = 8;
    function_code = _F_bs.getbits(_F_parse);
    if (bAttr) {
        WriteXmlElement("<function_code type=\"flUInt\" bitLen=\"%d\">%u</function_code>", _F_parse, function_code);
    }
    else {
        WriteXmlElement("<function_code bitLen=\"%d\">%u</function_code>", _F_parse, function_code);
    }
    do {
        _F_parse = 8;
        byte_count = _F_bs.getbits(_F_parse);
        if (bAttr) {
            WriteXmlElement("<byte_count type=\"flUInt\" bitLen=\"%d\">%u</byte_count>", _F_parse, byte_count);
        }
        else {
            WriteXmlElement("<byte_count bitLen=\"%d\">%u</byte_count>", _F_parse, byte_count);
        }
        if (byte_count!=0)
        {
            unsigned int i;
            for (i=0; i<byte_count; i++) {
                _F_parse = 8;
                data = _F_bs.getbits(_F_parse);
                if (bAttr) {
                    WriteXmlElement("<data type=\"flUInt\" bitLen=\"%d\">%u</data>", _F_parse, data);
                }
                else {
                    WriteXmlElement("<data bitLen=\"%d\">%u</data>", _F_parse, data);
                }
            }
        }
        
    } while (byte_count!=0);
    return _F_ret;
}

int ImageData::putxml(IBitstream &_F_bs, short int bAttr) {
    int _F_ret = 0;
    int _F_parse = 0;
    _F_parse = 8;
    code_size = _F_bs.getbits(_F_parse);
    if (bAttr) {
        WriteXmlElement("<code_size type=\"flUInt\" bitLen=\"%d\">%u</code_size>", _F_parse, code_size);
    }
    else {
        WriteXmlElement("<code_size bitLen=\"%d\">%u</code_size>", _F_parse, code_size);
    }
    do {
        _F_parse = 8;
        byte_count = _F_bs.getbits(_F_parse);
        if (bAttr) {
            WriteXmlElement("<byte_count type=\"flUInt\" bitLen=\"%d\">%u</byte_count>", _F_parse, byte_count);
        }
        else {
            WriteXmlElement("<byte_count bitLen=\"%d\">%u</byte_count>", _F_parse, byte_count);
        }
        if (byte_count!=0)
        {
            unsigned int i;
            for (i=0; i<byte_count; i++) {
                _F_parse = 8;
                data = _F_bs.getbits(_F_parse);
                if (bAttr) {
                    WriteXmlElement("<data type=\"flUInt\" bitLen=\"%d\">%u</data>", _F_parse, data);
                }
                else {
                    WriteXmlElement("<data bitLen=\"%d\">%u</data>", _F_parse, data);
                }
            }
        }
        
    } while (byte_count!=0);
    return _F_ret;
}

int ImageDescriptor::putxml(IBitstream &_F_bs, short int bAttr) {
    int _F_ret = 0;
    int _F_parse = 0;
    _F_parse = 16;
    left = _F_bs.little_getbits(_F_parse);
    if (bAttr) {
        WriteXmlElement("<left type=\"flUInt\" big=\"false\" bitLen=\"%d\">%u</left>", _F_parse, left);
    }
    else {
        WriteXmlElement("<left big=\"false\" bitLen=\"%d\">%u</left>", _F_parse, left);
    }
    _F_parse = 16;
    top = _F_bs.little_getbits(_F_parse);
    if (bAttr) {
        WriteXmlElement("<top type=\"flUInt\" big=\"false\" bitLen=\"%d\">%u</top>", _F_parse, top);
    }
    else {
        WriteXmlElement("<top big=\"false\" bitLen=\"%d\">%u</top>", _F_parse, top);
    }
    _F_parse = 16;
    width = _F_bs.little_getbits(_F_parse);
    if (bAttr) {
        WriteXmlElement("<width type=\"flUInt\" big=\"false\" bitLen=\"%d\">%u</width>", _F_parse, width);
    }
    else {
        WriteXmlElement("<width big=\"false\" bitLen=\"%d\">%u</width>", _F_parse, width);
    }
    _F_parse = 16;
    height = _F_bs.little_getbits(_F_parse);
    if (bAttr) {
        WriteXmlElement("<height type=\"flUInt\" big=\"false\" bitLen=\"%d\">%u</height>", _F_parse, height);
    }
    else {
        WriteXmlElement("<height big=\"false\" bitLen=\"%d\">%u</height>", _F_parse, height);
    }
    _F_parse = 1;
    M = _F_bs.getbits(_F_parse);
    if (bAttr) {
        WriteXmlElement("<M type=\"flUInt\" bitLen=\"%d\">%u</M>", _F_parse, M);
    }
    else {
        WriteXmlElement("<M bitLen=\"%d\">%u</M>", _F_parse, M);
    }
    _F_parse = 1;
    I = _F_bs.getbits(_F_parse);
    if (bAttr) {
        WriteXmlElement("<I type=\"flUInt\" bitLen=\"%d\">%u</I>", _F_parse, I);
    }
    else {
        WriteXmlElement("<I bitLen=\"%d\">%u</I>", _F_parse, I);
    }
    _F_parse = 3;
    markers = _F_bs.getbits(_F_parse);
    if (markers != 0) {
        flerror("Const value mismatch for 'markers'");
        _F_ret++;
        if (bAttr) {
            WriteXmlElement("<markers type=\"flUInt\" bitLen=\"%d\">%u</markers>", _F_parse, markers);
        }
        else {
            WriteXmlElement("<markers bitLen=\"%d\">%u</markers>", _F_parse, markers);
        }
    }
    else {
        if (bAttr) {
            WriteXmlElement("<markers type=\"flUInt\" bitLen=\"%d\">%u</markers>", _F_parse, markers);
        }
        else {
            WriteXmlElement("<markers bitLen=\"%d\">%u</markers>", _F_parse, markers);
        }
        trace(_F_bs.getpos()-_F_parse, _F_parse, (unsigned int)markers, "markers (%u)", markers);
    }
    _F_parse = 3;
    pixel = _F_bs.getbits(_F_parse);
    if (bAttr) {
        WriteXmlElement("<pixel type=\"flUInt\" bitLen=\"%d\">%u</pixel>", _F_parse, pixel);
    }
    else {
        WriteXmlElement("<pixel bitLen=\"%d\">%u</pixel>", _F_parse, pixel);
    }
    if (M!=0) {
        trace(_F_bs.getpos(), 0, (unsigned int)0, "processing ColorMap localColorMap");
        localColorMap = new(ColorMap);
        IntoAClass("localColorMap", 0);
        _F_ret += localColorMap->putxml(_F_bs, bAttr, pixel+1);
        OutOfClass("</localColorMap>");
    }
    
    trace(_F_bs.getpos(), 0, (unsigned int)0, "processing ImageData data");
    data = new(ImageData);
    IntoAClass("data", 0);
    _F_ret += data->putxml(_F_bs, bAttr);
    OutOfClass("</data>");
    return _F_ret;
}

int GIF87a::putxml(IBitstream &_F_bs, short int bAttr) {
    int _F_ret = 0;
    int _F_dim0, _F_dim0_end;
    int _F_parse = 0;
    _F_dim0 = 0;
    _F_parse = 8;
    GIFsignature[_F_dim0] = _F_bs.sgetbits(_F_parse);
    if (GIFsignature[_F_dim0] != 71) {
        flerror("Const value mismatch for 'GIFsignature[%d]'", _F_dim0);
        _F_ret++;
        if (bAttr) {
            WriteXmlElement("<GIFsignature type=\"flSChar\" bitLen=\"%d\">%c</GIFsignature>", _F_parse, GIFsignature[_F_dim0]);
        }
        else {
            WriteXmlElement("<GIFsignature bitLen=\"%d\">%c</GIFsignature>", _F_parse, GIFsignature[_F_dim0]);
        }
    }
    else {
        if (bAttr) {
            WriteXmlElement("<GIFsignature type=\"flSChar\" bitLen=\"%d\">%c</GIFsignature>", _F_parse, GIFsignature[_F_dim0]);
        }
        else {
            WriteXmlElement("<GIFsignature bitLen=\"%d\">%c</GIFsignature>", _F_parse, GIFsignature[_F_dim0]);
        }
        trace(_F_bs.getpos()-_F_parse, _F_parse, (unsigned int)GIFsignature[_F_dim0], "GIFsignature[%d] (%c)", _F_dim0, GIFsignature[_F_dim0]);
    }
    _F_dim0 = 1;
    _F_parse = 8;
    GIFsignature[_F_dim0] = _F_bs.sgetbits(_F_parse);
    if (GIFsignature[_F_dim0] != 73) {
        flerror("Const value mismatch for 'GIFsignature[%d]'", _F_dim0);
        _F_ret++;
        if (bAttr) {
            WriteXmlElement("<GIFsignature type=\"flSChar\" bitLen=\"%d\">%c</GIFsignature>", _F_parse, GIFsignature[_F_dim0]);
        }
        else {
            WriteXmlElement("<GIFsignature bitLen=\"%d\">%c</GIFsignature>", _F_parse, GIFsignature[_F_dim0]);
        }
    }
    else {
        if (bAttr) {
            WriteXmlElement("<GIFsignature type=\"flSChar\" bitLen=\"%d\">%c</GIFsignature>", _F_parse, GIFsignature[_F_dim0]);
        }
        else {
            WriteXmlElement("<GIFsignature bitLen=\"%d\">%c</GIFsignature>", _F_parse, GIFsignature[_F_dim0]);
        }
        trace(_F_bs.getpos()-_F_parse, _F_parse, (unsigned int)GIFsignature[_F_dim0], "GIFsignature[%d] (%c)", _F_dim0, GIFsignature[_F_dim0]);
    }
    _F_dim0 = 2;
    _F_parse = 8;
    GIFsignature[_F_dim0] = _F_bs.sgetbits(_F_parse);
    if (GIFsignature[_F_dim0] != 70) {
        flerror("Const value mismatch for 'GIFsignature[%d]'", _F_dim0);
        _F_ret++;
        if (bAttr) {
            WriteXmlElement("<GIFsignature type=\"flSChar\" bitLen=\"%d\">%c</GIFsignature>", _F_parse, GIFsignature[_F_dim0]);
        }
        else {
            WriteXmlElement("<GIFsignature bitLen=\"%d\">%c</GIFsignature>", _F_parse, GIFsignature[_F_dim0]);
        }
    }
    else {
        if (bAttr) {
            WriteXmlElement("<GIFsignature type=\"flSChar\" bitLen=\"%d\">%c</GIFsignature>", _F_parse, GIFsignature[_F_dim0]);
        }
        else {
            WriteXmlElement("<GIFsignature bitLen=\"%d\">%c</GIFsignature>", _F_parse, GIFsignature[_F_dim0]);
        }
        trace(_F_bs.getpos()-_F_parse, _F_parse, (unsigned int)GIFsignature[_F_dim0], "GIFsignature[%d] (%c)", _F_dim0, GIFsignature[_F_dim0]);
    }
    _F_dim0 = 3;
    _F_parse = 8;
    GIFsignature[_F_dim0] = _F_bs.sgetbits(_F_parse);
    if (GIFsignature[_F_dim0] != 56) {
        flerror("Const value mismatch for 'GIFsignature[%d]'", _F_dim0);
        _F_ret++;
        if (bAttr) {
            WriteXmlElement("<GIFsignature type=\"flSChar\" bitLen=\"%d\">%c</GIFsignature>", _F_parse, GIFsignature[_F_dim0]);
        }
        else {
            WriteXmlElement("<GIFsignature bitLen=\"%d\">%c</GIFsignature>", _F_parse, GIFsignature[_F_dim0]);
        }
    }
    else {
        if (bAttr) {
            WriteXmlElement("<GIFsignature type=\"flSChar\" bitLen=\"%d\">%c</GIFsignature>", _F_parse, GIFsignature[_F_dim0]);
        }
        else {
            WriteXmlElement("<GIFsignature bitLen=\"%d\">%c</GIFsignature>", _F_parse, GIFsignature[_F_dim0]);
        }
        trace(_F_bs.getpos()-_F_parse, _F_parse, (unsigned int)GIFsignature[_F_dim0], "GIFsignature[%d] (%c)", _F_dim0, GIFsignature[_F_dim0]);
    }
    _F_dim0 = 4;
    _F_parse = 8;
    GIFsignature[_F_dim0] = _F_bs.sgetbits(_F_parse);
    if (GIFsignature[_F_dim0] != 55) {
        flerror("Const value mismatch for 'GIFsignature[%d]'", _F_dim0);
        _F_ret++;
        if (bAttr) {
            WriteXmlElement("<GIFsignature type=\"flSChar\" bitLen=\"%d\">%c</GIFsignature>", _F_parse, GIFsignature[_F_dim0]);
        }
        else {
            WriteXmlElement("<GIFsignature bitLen=\"%d\">%c</GIFsignature>", _F_parse, GIFsignature[_F_dim0]);
        }
    }
    else {
        if (bAttr) {
            WriteXmlElement("<GIFsignature type=\"flSChar\" bitLen=\"%d\">%c</GIFsignature>", _F_parse, GIFsignature[_F_dim0]);
        }
        else {
            WriteXmlElement("<GIFsignature bitLen=\"%d\">%c</GIFsignature>", _F_parse, GIFsignature[_F_dim0]);
        }
        trace(_F_bs.getpos()-_F_parse, _F_parse, (unsigned int)GIFsignature[_F_dim0], "GIFsignature[%d] (%c)", _F_dim0, GIFsignature[_F_dim0]);
    }
    _F_dim0 = 5;
    _F_parse = 8;
    GIFsignature[_F_dim0] = _F_bs.sgetbits(_F_parse);
    if (GIFsignature[_F_dim0] != 97) {
        flerror("Const value mismatch for 'GIFsignature[%d]'", _F_dim0);
        _F_ret++;
        if (bAttr) {
            WriteXmlElement("<GIFsignature type=\"flSChar\" bitLen=\"%d\">%c</GIFsignature>", _F_parse, GIFsignature[_F_dim0]);
        }
        else {
            WriteXmlElement("<GIFsignature bitLen=\"%d\">%c</GIFsignature>", _F_parse, GIFsignature[_F_dim0]);
        }
    }
    else {
        if (bAttr) {
            WriteXmlElement("<GIFsignature type=\"flSChar\" bitLen=\"%d\">%c</GIFsignature>", _F_parse, GIFsignature[_F_dim0]);
        }
        else {
            WriteXmlElement("<GIFsignature bitLen=\"%d\">%c</GIFsignature>", _F_parse, GIFsignature[_F_dim0]);
        }
        trace(_F_bs.getpos()-_F_parse, _F_parse, (unsigned int)GIFsignature[_F_dim0], "GIFsignature[%d] (%c)", _F_dim0, GIFsignature[_F_dim0]);
    }
    trace(_F_bs.getpos(), 0, (unsigned int)0, "processing ScreenDescriptor sd");
    sd = new(ScreenDescriptor);
    IntoAClass("sd", 0);
    _F_ret += sd->putxml(_F_bs, bAttr);
    OutOfClass("</sd>");
    do {
        _F_parse = 8;
        end = _F_bs.getbits(_F_parse);
        if (bAttr) {
            WriteXmlElement("<end type=\"flUInt\" bitLen=\"%d\">%u</end>", _F_parse, end);
        }
        else {
            WriteXmlElement("<end bitLen=\"%d\">%u</end>", _F_parse, end);
        }
        if (end==44) {
            trace(_F_bs.getpos(), 0, (unsigned int)0, "processing ImageDescriptor id");
            id = new(ImageDescriptor);
            IntoAClass("id", 0);
            _F_ret += id->putxml(_F_bs, bAttr);
            OutOfClass("</id>");
        }
        
        if (end==33) {
            trace(_F_bs.getpos(), 0, (unsigned int)0, "processing ExtensionBlock eb");
            eb = new(ExtensionBlock);
            IntoAClass("eb", 0);
            _F_ret += eb->putxml(_F_bs, bAttr);
            OutOfClass("</eb>");
        }
        
    } while (end!=59);
    return _F_ret;
}
