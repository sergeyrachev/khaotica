<html>

<head>
<title>Declarations</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/>
<link href="../css/txt.css" rel="stylesheet" type="text/css"/>
</head>


<body topmargin="20" leftmargin="5" bgcolor="white" link="red" alink="#003399" vlink="#003399">

<h3><strong>2. Declarations</strong></h3>

<table border="0" width="100%" class="Syntax">
  <tr>
    <td class="SyntaxHeading" width="100%" bgcolor="#000000"><code></code><font color="#FFFFFF"><strong><span class="SyntaxHeading">Syntax Summary</span></strong></font><code></code></td>
  </tr>
  <tr>
    <td width="100%"><pre><code>[aligned[(<em>expression</em>)]] <em>type</em>[(<em>expression</em> | <em>map</em>)][*] <em>name</em> [= <em>expression</em>];</code></pre></td>
  </tr>
</table>


<h4><a name="general">2.1 General</a></h4>

<p>
Regular variable declarations can be used in Flavor in the same way as in C++ and Java.
</p>

<p>
As Flavor follows a declarative approach, constant variable declarations with specified values are
allowed everywhere (there is no constructor to set the initial values). This means that the declaration
"<code>const int a=1;</code>" is valid anywhere (not just in global scope). The two major differences 
are the declaration of parsable variables (discussed below) and 
<a href="arrays.htm">arrays</a>.
</p>


<h4><a name="parsable">2.2 Parsable Variables</a></h4>

<p>
Parsable variables are the core of Flavor&#146;s design; it is the proper definition of these variables
that defines the bitstream syntax. Parsable variables include a parse length specification immediately
after their type declaration, as shown in the following example.
</p>

<table border="0" width="100%" class="Example">
  <tr>
    <td width="100%"><pre><code>unsigned int(5) var;</code></pre></td>
  </tr>
</table>

<p>
In the above example, the length of the parsable variable <code>var</code> is defined to be 5 bits. The
length can be an integer constant, a non-constant variable of type compatible to <code>int</code>, or a
<a href="maps.htm"><code>map</code></a> with the same type as the variable. This means that the parse
length of a variable can be controlled by another variable.
</p>

<p>
By default, byte ordering is big-endian, i.e., the most significant byte comes first in the bitstream.  
The byte ordering can be switched between big- and little-endian using the <code>big</code> and 
<code>little</code> modifiers, respectively.
</p>

<p>
In addition to the parse length specification, parsable variables (including parsable
<a href="classes.htm">classes</a>) can also have the modifier <code>aligned</code>. This signifies that
the variable begins at the next integer multiple boundary of the length specified within the alignment
expression. If this length is omitted, an alignment size of 8 is assumed (byte boundary). Only multiples
of 8 are allowed. For parsing, any intermediate bits are ignored, while for output bitstream generation,
the bitstream is padded with zeros.
</p>

<p>
Parsable variables cannot be assigned to. This ensures that the syntax is preserved regardless if we are
performing an input or output operation. However, parsable variables can be redeclared, as long as their
type remains the same, only the parse size is changed, and the original declaration was not declared as
a const. This allows one to select the parse size depending on the context (see <a href="exp.htm">
Expressions and Statements</a>). In addition, they obey special scoping rules (see <a href="scoping.htm">
Scoping Rules</a>).
</p>

<p>
In general, the parse size expression must be a non-negative value. The special value 0 can be used
when, depending on the bitstream context, a variable is not present in the bitstream but obtains a
default value. In this case no bits will be parsed or generated, however the semantics of the
declaration will be preserved.
</p>

<p>
Finally, variables of type <code>float</code>, <code>double</code>, and <code>long double</code> are
only allowed to have a parse size equal to the fixed size that their standard representation requires
(32 and 64 bits).
</p>


<h4><a name="lookahead">2.3 Look-Ahead Parsing</a></h4>

<p>
In several instances it is desirable to examine the immediately following bits in the bitstream, without
actually removing the bits. To support this behavior, a '*' character can be placed after the parse size
parentheses to modify the parse size semantics. Note that for bitstream output purposes this has no
effect. Example:
</p>

<table border="0" width="100%" class="Example">
  <tr>
    <td width="100%"><pre><code>unsigned int(5)* var;</code></pre></td>
  </tr>
</table>


<h4><a name="expected">2.4 Parsable Variables with Expected Values</a></h4>

<p>
Very often, certain parsable variables in the syntax have to have specific values (markers, start codes,
reserved bits, etc.). These are specified as initialization values for parsable variables. Example:
</p>

<table border="0" width="100%" class="Example">
  <tr>
    <td width="100%"><pre><code>aligned unsigned int(5) var = 7;</code></pre></td>
  </tr>
</table>

<p>
The keyword <code>const</code> may be prepended in the declaration, to indicate that the parsable
variable will have this constant value and, as a result, cannot be redeclared. Additionally, a parsable 
variable may be allowed to have a range of expected values and an example is given below.  
</p>

<table border="0" width="100%" class="Example">
  <tr>
    <td width="100%"><pre><code>aligned unsigned int(5) var = 7 .. 12;</code></pre></td>
  </tr>
</table>

<p>
As both parse size and initial value can be arbitrary expressions, we should note that the order of
evaluation is the parse expression first, followed by the initializing expression.
</p>


<p align="center" class="notice"><a href='..\copyright.htm'>Copyright Notice</a></p>
<p>&nbsp;</p>

</body>

</html>
