<html>

<head>
<title>Arrays and Partial Arrays</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/>
<link href="../css/txt.css" rel="stylesheet" type="text/css"/>
</head>


<body topmargin="20" leftmargin="5" bgcolor="white" link="red" alink="#003399" vlink="#003399">

<h3><strong>3. Arrays</strong></h3>

<table border="0" width="100%" class="Syntax">
  <tr>
    <td class="SyntaxHeading" width="100%" bgcolor="#000000"><code></code><font color="#FFFFFF"><strong><span class="SyntaxHeading">Syntax Summary</span></strong></font><code></code></td>
  </tr>
  <tr>
    <td width="100%"><pre><code><em>type name</em>[<em>expression</em>]...   [ =<em>expression</em> ]; // regular array
<em>type name</em>[[<em>expression</em>]]... [ =<em>expression</em> ]; // partial array</code></pre>
    </td>
  </tr>
</table>

<p>
Arrays have special behavior in Flavor, due to its declarative nature but also due to the desire for
very dynamic type declarations. For example, we want to be able to declare a (parsable or non-parsable)
array with different array sizes depending on the context. In addition, we may need to load the elements
of an array one at a time (this is needed when the retrieved value indicates indirectly if further
elements of the array should be parsed).
</p>

<p>
These requirements gave rise to some special properties of arrays in Flavor, that make them quite 
different from their corresponding structures in C++ or Java. 
</p>


<h4><a name="regular">3.1 Regular Arrays</a></h4>

<p>
The array size does not have to be a constant expression (as in C++ and Java), but it can be a variable
as well. The following is thus allowed in Flavor.
</p>

<table border="0" width="100%" class="Example">
  <tr>
    <td width="100%"><pre><code>int a = 2;
int(2) A[a++];</code></pre>
    </td>
  </tr>
</table>

<p>
The usual brace expression initialization (e.g., "<code>int a[2] = {1, 2};</code>") is supported as 
well as the specification of a single expression as the initializer. For example, we can write:
</p>

<table border="0" width="100%" class="Example">
  <tr>
    <td width="100%"><pre><code>int A[3] = 5;</code></pre>
    </td>
  </tr>
</table>

<p>
This means that all elements of <code>A</code> will be initialized with the value 5.
</p>

<p>
In order to provide more powerful semantics to array initialization, Flavor considers the parse size 
and initializer expressions as executed per each element of the array. The array size expression, however,
is only executed once, and before the parse size expression or the initializer expression.
</p>

<p>Let&#146;s look at a more complicated example.</p>

<table border="0" width="100%" class="Example">
  <tr>
    <td width="100%"><pre><code>int a = 1;
int((a++)) A[(a++)] = (a++);</code></pre>
    </td>
  </tr>
</table>

<p>
Here <code>A</code> is declared as an array of 2 integers. The first one is parsed with 3 bits and is
expected to have the value 4, while the second is parsed with 5 bits and is expected to have the value
6.
</p>

<p>
This probably represents the largest deviation of Flavor's design from C++ and Java declarations.
On the other hand it does provide significant flexibility in constructing sophisticated declarations in
a very compact form, and it is also in line with the dynamic nature of variable declarations that Flavor
provides.
</p>

<p>
The values in the initialization expressions within braces also do not need be constants. For example,
the following example is legal:
</p>

<table border="0" width="100%" class="Example">
  <tr>
    <td width="100%"><pre><code>int i = 1;
int(5) A[3] = {i+1, i+2, i+3};</code></pre>
    </td>
  </tr>
</table>


<h4><a name="partial">3.2 Partial Arrays</a></h4>

<p>
An additional refinement of array declaration is partial arrays. These are declarations of parsable
arrays in which only a subset of the array needs to be declared (or, equivalently, parsed from or
written to a bitstream). Flavor introduces a double brace notation for this purpose. The following
example demonstrates its use.
</p>

<table border="0" width="100%" class="Example">
  <tr>
    <td width="100%">
      <pre><code>int(2) A[[3]] = 1;
int(4) B[[2]][3];</code></pre>
    </td>
  </tr>
</table>

<p>
In the first line, we are declaring the 4-th element of <code>A</code> (array indices start from 0). The
array size is unknown at this point, but of course it will be considered at least 4. In the second line,
we are declaring a two-dimensional array, and in particular only its third row (assuming the first
index corresponds to a row). The array indices can, of course, be expressions themselves. Partial arrays
can only appear on the left-hand side of declarations and are not allowed in expressions.
</p>


<h4><a name="strings">3.3 Strings</a></h4>

<p>
Strings are treated in Flavor as one-dimensional arrays. In other words, the following expressions are
equivalent:
</p>

<table border="0" width="100%" class="Example">
  <tr>
    <td width="100%">
      <pre><code>char(8) a[4] = {'a', 'b', 'c', '\0'};
char(8) b[4] = &quot;abc&quot;;</code></pre>
    </td>
  </tr>
</table>

<p>
Note that the length of the array must match the length of the string. Also, by default, strings are considered
not to include a trailing null character ('\0'), unless otherwise specified to the translator (via an appropriate 
command line option or pragma statement). 
</p>


<p align="center" class="notice"><a href='..\copyright.htm'>Copyright Notice</a></p>
<p>&nbsp;</p>

</body>

</html>
