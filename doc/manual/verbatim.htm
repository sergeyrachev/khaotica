<html>

<head>

<title>Verbatim Code</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/>
<link href="../css/txt.css" rel="stylesheet" type="text/css"/>

</head>


<body topmargin="20" leftmargin="5" bgcolor="white" link="red" alink="#003399" vlink="#003399">

<h3>4. Verbatim Code</h3>

<p>
In order to develop a fully functional C++ or Java program, it is sometimes desirable to expand
Flavor-defined classes with additional functionality. This can be easily done by deriving new 
classes from the ones defined in the Flavor source code. When only trivial modifications are 
needed, however, this may require more effort that necessary.
</p>

<p>
More importantly, it is sometimes desirable to intervene to the code generated by the translator.
A trivial example is to ensure that member variables are declared <code>private</code> or
<code>protected</code>, rather than the default of <code>public</code> used by the translator.
Other examples include constructors and destructors, in-line methods, etc. More sophisticated 
cases involve intervention to the <code>get()</code> or <code>put()</code> code produced by the 
translator.
</p>

<p>
In order to facilitate the highest possible level of integration between Flavor and the base
language (C++ or Java), the translator supports <em>verbatim code</em> segments. In other words,
segments that contain user code which will be ignored by the Flavor translator, but copied 
verbatim to the output file.
</p>

<p>
There are four different types of verbatim code segments, reflecting the different program areas 
where such code should be copied: class declaration or global scope, <code>put() </code>method,
<code>get()</code> method, or both <code>put()</code> and <code>get()</code> methods. Regardless
of the type, verbatim code can appear wherever a regular Flavor statement or declaration can 
appear. Also, it is copied to the output file at the exact position where it appears.
</p>

<p>
The verbatim code segments are enclosed with the <i>verbatim delimeters</i>. For example the
delimeters for verbatim code which goes to the global scope of the generated code are: 
<code>%{</code> and <code>%}</code>. In order to differentiate the verbatim code segments for 
Java and C++ more decorated version of verbatim delimeters are provided. For example the verbatim
code segment enclosed with <code>%.j{</code> and <code>%.j}</code> goes to the global scope of 
the generated Java code but not in C++ code.
</p>

<p>
In the following, in addition to describing the various types of verbatim code and its use, we 
also describe how to facilitate compilation and debugging of such code. The delimeters used in 
the examples are both for Java and C++. So all the verbatim code between in the delimeters 
appeared in the sample codes would be copied into both Java and C++ code. The complete list of 
verbatim delimeters are provided below.
</p>


<h4><a name="declarative">4.1 Declarative Verbatim Code</a></h4>

<p>
Declarative verbatim code is introduced with the delimiter <code>%{</code> and ends with the
delimiter <code>%}</code>. Here are a few examples.
</p>

<table border="0" width="100%" class="Example">
<caption>Declarative Verbatim Code Examples</caption>
<tr><td width="100%"><code>
<pre>// Declare a global pointer
%{ char *p; %}

// Customize declaration of class member variables
class Example {
    %{ private: %}
    int(5) a;

    %{ protected: %}
    unsigned char(6) b;

    // Declare a method (will be protected)
    %{ int dosomething(void); %}
    
    // Declare an inline method
    %{ inline int geta(void) { return a; } %}
}</pre>
</code></td></tr>
</table>

<p>
The declaration of the pointer <code>p</code> in file scope will be placed before the 
<code>Example</code> class is declared. Similarly, the <code>private</code> keyword will be 
inserted before <code>a</code> is declared. The translator outputs a <code>public</code> 
directive right at the beginning of the class; as a result, any other directive inserted will 
override it. The <code>dosomething()</code> method will be declared as <code>protected</code> 
since this is the directive that is active when its declaration is encountered (it is the 
directive preceding the declaration of <code>b</code>).
</p>


<h4><a name="get">4.2 Get() Verbatim Code</a></h4>

<p>
This verbatim code segment is enclosed in the delimiters <code>%g{</code> and <code>%g}</code>.
All text contained between these two will be output at the exact same place in the
<code>get()</code> method only. Let's see an example.
</p>

<table border="0" width="100%" class="Example">
<caption>Get() Verbatim Code Example</caption>
<tr><td width="100%"><code>
<pre>class Example {
    int(5) a;

    %g{ printf(&quot;after 'a' (=%d), but before 'b'\n&quot;, a); %g}

    unsigned char(6) b;
}</pre>
</code></td></tr>
</table>

<p>
The <code>printf()</code> statement will be inserted in the <code>get()</code> method after the
code for outputting <code>a</code> (including any required code for tracing, if requested), but
before the code for outputting <code>b</code>.
</p>


<h4><a name="put">4.3 Put() Verbatim Code</a></h4>

<p>
Similarly to the previous case, this verbatim code segment is enclosed in the delimiters
<code>%p{</code> and <code>%p}</code>. All text contained between these two will be output at 
the exact same place in the <code>put()</code> method only. Using our previous example:
</p>

<table border="0" width="100%" class="Example">
<caption>Put() Verbatim Code Example</caption>
<tr><td width="100%"><code>
<pre>class Example {
    int(5) a;

    %p{ printf(&quot;after 'a', but before 'b'\n&quot;); %p}

    unsigned char(6) b;
}</pre>
</code></td></tr>
</table>

<p>
Here the <code>printf()</code> statement will be inserted in the <code>put()</code> method after
the code for outputting <code>a</code>, but before the code for outputting <code>b</code>. This
allows the programmer very fine control, even <em>inside</em> the <code>put()</code> method. For
example, you could place at the top of the definition of a Flavor class a call to a function that
will transform its data and prepare them for output. This way, a single call to the 
<code>put()</code> method will perform both the transformation (encoding) and outputing the
resulting bits (creating the bitstream representation).
</p>



<h4><a name="both">4.4 Get()/Put() Verbatim Code</a></h4>

<p>
For cases where the same code should be inserted in both the <code>get()</code> and the
<code>put()</code> method, the delimiters <code>%*{</code> and <code>%*}</code> can be used.
</p>


<h4><a name="verbatimlist">4.5 Verbatim delimeters</a></h4>

<table border="1" width="100%" bordercolor="#000000" bordercolorlight="#000000" bordercolordark="#000000" bgcolor="#FFFFFF">
  <tr> 
    <td width="16%" bgcolor="#000000"><font color="#FFFFFF"><span class="ExampleHeading">Verbatim Delimeters </span></font></td>
    <td width="84%" bgcolor="#000000"><font color="#FFFFFF"><span class="ExampleHeading">Destination of Verbatim code</span></font></td>
  </tr>
  <tr> 
    <td width="16%" valign="top"><code>%{ and %}</code></td>
    <td width="84%" valign="top"><span class="ExampleText">Global scope of C++ and Java</span></td>
  </tr>
  <tr> 
    <td width="16%" valign="top"><code>%g{ and %g}</code></td>
    <td width="84%" valign="top"><span class="ExampleText">Get method of C++ and Java </span></td>
  </tr>
  <tr> 
    <td width="16%" valign="top"><code>%p{ and %p}</code></td>
    <td width="84%" valign="top"><span class="ExampleText">Put method of C++ and Java</span></td>
  </tr>
  <tr> 
    <td width="16%" valign="top"><code>%*{ and %*}</code></td>
    <td width="84%" valign="top"><span class="ExampleText">Both Get and Put methods of C++ and Java</span></td>
  </tr>
  <tr> 
    <td width="16%" valign="top"><code>%.c{ and %.c}</code></td>
    <td width="84%" valign="top"><span class="ExampleText">Global scope of C++</span></td>
  </tr>
  <tr> 
    <td width="16%" valign="top"><code>%g.c{ and %g.c}</code></td>
    <td width="84%" valign="top"><span class="ExampleText">Get method of C++</span></td>
  </tr>
  <tr> 
    <td width="16%" valign="top"><code>%p.c{ and %p.c}</code></td>
    <td width="84%" valign="top"><span class="ExampleText">Put method of C++</span></td>
  </tr>
  <tr> 
    <td width="16%" valign="top"><code>%*.c{ and %*.c}</code></td>
    <td width="84%" valign="top"><span class="ExampleText">Both Get and Put methods of C++</span></td>
  </tr>
  <tr> 
    <td width="16%" valign="top"><code>%.j{ and %.j}</code></td>
    <td width="65%" valign="top"><span class="ExampleText">Global scope of Java</span></td>
  </tr>
  <tr> 
    <td width="16%" valign="top"><code>%g.j{ and %g.j}</code></td>
    <td width="65%" valign="top"><span class="ExampleText">Get method of Java</span></td>
  </tr>
  <tr> 
    <td width="16%" valign="top"><code>%p.j{ and %p.j}</code></td>
    <td width="65%" valign="top"><span class="ExampleText">Put method of Java</span></td>
  </tr>
  <tr> 
    <td width="16%" valign="top"><code>%*.j{ and %*.j}</code></td>
    <td width="65%" valign="top"><span class="ExampleText">Both Get and Put methods of Java</span></td>
  </tr>
</table>


<h4><a name="debugging"><strong>4.6 Debugging Verbatim Code</strong></a></h4>

<p>
When verbatim code is used, the translator generates C++ preprocessor statements to indicate its
position in the Flavor source code. This helps development environments that automatically
position the programmer's editor to the source position where the error was detected. This
information is also used by source code debuggers to position their source window to the right
file and line.
</p>

<p>
In the case where you want compiler error messages to refer to the 
<code>flavorc</code>-generated C++ file, or your debugger to use the 
<code>flavorc</code>-generated C++ file, you can switch output of such line information off
using the <code>-l</code> <a href="options.htm">command line option</a> or the <code>line</code>
<a href="pragma.htm">pragma directive</a>.</p>


<p>&nbsp;</p>
<p align="center" class="notice"><a href='..\copyright.htm'>Copyright Notice</a></p>
<p>&nbsp;</p>


</body>

</html>
